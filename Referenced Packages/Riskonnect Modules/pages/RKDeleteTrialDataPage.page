<apex:page controller="rkl.RKDeleteTrialDataPageController">
	<style type="text/css">

	/*
		.progressBar {
			height: 100%;
			border-radius: 10px;
			background-color: #D25F33;
			width: 0px;
			margin-top: ;
		}

		.progressBarComplete {
			height: 100%;
			border-radius: 10px;
			background-color: #3FA7C9;
			width: 100%;
		}

		.progressBarError {
			height: 100%;
			border-radius: 10px;
			background-color: #D13838;
			width: 100%;
		}
		
		.progressBarContainer {
			width: 100%;
			height: 15px;
			border: 2px solid black;
			border-radius: 10px;
			margin-bottom: 15px;
			margin-top: 5px;
		}
		*/

		#startDeletionButton {
			-webkit-user-select: none;
		}

		#statusMessageHolder {
			color: black;
			font-size: 15pt;
			text-align: center;
			margin-top: 10px;
		}
	</style>
	<script src="/soap/ajax/27.0/connection.js" type="text/javascript"></script>
	  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.js"/>
	  <script type="text/javascript">
		sforce.connection.sessionId = "{!GETSESSIONID()}";
		
		$.noConflict();
		
		var defaultObjectTypes = [
			"JHA__c", "Assets__c", "Root_Cause_Analysis__c", "Letter__c", "Attachment__c", 
			"Waste_Manifest__c", "Certificate_Requirement__c", "Certificate_of_Insurance__c", 
			"Vendor__c", "Safety_Observation__c", "EHS_Metrics__c", "Investigation__c", 
			"Corrective_Actions__c", "Intake_Incident__c", "JHA_Job_Task__c", "Policy_Endorsement__c", 
			"Policy_Loss__c", "Claim_Transaction__c", "Work_Status__c", "Medicare_Transmissions__c", 
			"Claim__c", "Vehicle__c", "Litigation__c", "Policy_Map__c", "Policy_Participant__c", 
			"Policy_Transactions__c", "Policy_Subsection__c", "Policy_Section__c", "Policy__c", "Event__c", 
			"Exposure__c", "Contact", "Account", "Property_Recommendations__c", "Property_Value__c", 
			"Property__c", "Time_Dimension__c", "rkl__RK_Hierarchy_Node__c"
		];

		var objectTypes = defaultObjectTypes.slice(0);
		
		var progressTracker;
		
		(function($) {
		
			// if console.log/error does not exist (e.g. IE 8), fill in a function that will alert:
			if (typeof console === "undefined") {
			   console = {};
			}
			if (!console.log) {
			   console.log = function (data) {
				   // IE users deserve a little flak, plus they should be used to annoying popups anyways:
				   window.alert("" + data);
			   };
			}
			if (!console.error) {
			   console.error = function (data) {
				   console.log("ERROR: " + data);
			   }
			}

			var progressTracker = {

				hasProfilePermission: {!hasProfilePermission},

				hasOrgPermission: {!hasOrgPermission},

				//updateIntervalTime: 3500,

				//updaterIntervalID: '',

				//batchProgressTrackers: {},

				//batchJobsQueuedViaThisTool: 0,

				//batchQueue: [],

				initialize: function() {
					progressTracker.initializeUI();
					progressTracker.initializeEventHandlers();
					console.log('Has Profile Permission: ' + progressTracker.hasProfilePermission);
					console.log('Has Org Permission: ' + progressTracker.hasOrgPermission);
				},

				reset: function() {
					progressTracker.hasProfilePermission = {!hasProfilePermission};
					progressTracker.hasOrgPermission = {!hasOrgPermission};
					//progressTracker.batchProgressTrackers = {};
					//$('#progressTrackerBarsHolder').empty();
					//$('#statusMessageHolder').empty();
				},

				/*startUpdateLoop: function() {
					if (progressTracker.updaterIntervalID == '' || progressTracker.updaterIntervalID == null) {
						progressTracker.updateLoop();
						progressTracker.updaterIntervalID = window.setInterval(progressTracker.updateLoop, progressTracker.updateIntervalTime);
					}
					$('#statusMessageHolder').text('');
				},*/

				/*
				updateLoop: function() {
					var shouldStopLoop = true;

					for (var trackerValue in progressTracker.batchProgressTrackers) {
						var tracker = progressTracker.batchProgressTrackers[trackerValue];
						if (!tracker.deletionComplete && !tracker.error && tracker.startedBatchJob && tracker.batchJobID != null && tracker.batchJobID != '') {
							var matchingBatchJob = sforce.connection.query('SELECT ID, CompletedDate, JobType, Status, ExtendedStatus, JobItemsProcessed, TotalJobItems FROM AsyncApexJob WHERE ID = \'' + tracker.batchJobID + '\' LIMIT 1').records;
							var jobPercentComplete = matchingBatchJob.JobItemsProcessed / matchingBatchJob.TotalJobItems * 100.0;
							var jobStatus = matchingBatchJob.Status;
							var jobEncounteredError = matchingBatchJob.Status == 'Failed';
							var jobEncounteredNonStoppingError = matchingBatchJob.ExtendedStatus != null && matchingBatchJob.ExtendedStatus.indexOf('error') != -1 && matchingBatchJob.Status != 'Failed';
							var jobAborted = matchingBatchJob.Status == 'Aborted';
							if (jobStatus == 'Completed' && matchingBatchJob.TotalJobItems == 0 && !jobEncounteredError) {
								jobPercentComplete = 100.0;
							}

							if (jobPercentComplete == 100.0 && jobStatus == 'Completed' && !jobEncounteredError && !jobAborted) {
								tracker.progressBarElement.attr('class', 'progressBarComplete');
								tracker.progressBarElement.css('width', '100%');
								tracker.deletionComplete = true;
								tracker.progressBarMessageElement.text(tracker.objectType + ': ' + ' Deletion Complete');
								tracker.jobPercentComplete = jobPercentComplete;
							} else if (jobEncounteredError || jobAborted) {
								tracker.progressBarElement.attr('class', 'progressBarError');
								tracker.progressBarElement.css('width', '');
								tracker.error = true;
								tracker.errorMessage = (matchingBatchJob.ExtendedStatus == '' || matchingBatchJob.ExtendedStatus == null)?'Job Aborted':matchingBatchJob.ExtendedStatus;
								tracker.progressBarMessageElement.text(tracker.objectType + ': ' + tracker.errorMessage);
								tracker.jobPercentComplete = jobPercentComplete;
								tracker.retryButton.show();
							} else if (jobEncounteredNonStoppingError) {
								tracker.progressBarElement.css('width', jobPercentComplete + '%');
								tracker.jobPercentComplete = jobPercentComplete;
								tracker.progressBarMessageElement.text(tracker.objectType + ': ' + jobPercentComplete + '% :: Warning Encountered, Job Will Continue: ' + matchingBatchJob.ExtendedStatus);
							} else if (jobPercentComplete < 100.0) {
								tracker.progressBarElement.css('width', jobPercentComplete + '%');
								tracker.jobPercentComplete = jobPercentComplete;
								tracker.progressBarMessageElement.text(tracker.objectType + ': ' + jobPercentComplete + '%');
							}
							shouldStopLoop = false;
						} else if (tracker.batchJobID == null || tracker.batchJobID == '') {
							shouldStopLoop = false;
						}
					}

					progressTracker.checkQueue();

					if (shouldStopLoop) {
						progressTracker.stopUpdateLoop();
					}

				},

				stopUpdateLoop: function() {
					window.clearInterval(progressTracker.updaterIntervalID);
					progressTracker.updaterIntervalID = '';
					$('#statusMessageHolder').text('Deletion Complete');
				},

				checkQueue: function() {
					var currentlyRunningBatchJobs = progressTracker.getNumberOfRunningBatchJobs();

					var openBatchSlots = 1 - currentlyRunningBatchJobs - progressTracker.batchJobsQueuedViaThisTool;

					for (var queueCounter = 0; queueCounter < openBatchSlots; queueCounter++) {
						if (progressTracker.batchQueue[0] != null) {
							progressTracker.startNewBatchJob(progressTracker.batchQueue[0]);
							progressTracker.batchQueue.splice(0, 1);
						}
					}
				},


				//HELPER METHODS--------------------------//

				startNewTask: function(objectType) {
					var newProgressTracker = {};

					var newProgressBarContainerElement = $('<div/>')
													.attr('class', 'progressBarContainer');

					var newProgressBarElement = $('<div/>')
													.attr('class', 'progressBar');

					newProgressBarContainerElement.append(newProgressBarElement);

					var newProgressBarInfoMessage = $('<strong/>')
														.attr('class', 'progressBarTypeText')
														.text(objectType + ': Queued');

					var newProgressRetryButton = $('<div/>')
														.attr('class', 'btn')
														.text('Retry');

					$('#progressTrackerBarsHolder').append(newProgressRetryButton);
					$('#progressTrackerBarsHolder').append(newProgressBarInfoMessage);
					$('#progressTrackerBarsHolder').append(newProgressBarContainerElement);

					newProgressRetryButton.hide();

					newProgressTracker.progressBarContainerElement = newProgressBarContainerElement;
					newProgressTracker.progressBarElement = newProgressBarElement;
					newProgressTracker.progressBarMessageElement = newProgressBarInfoMessage;
					newProgressTracker.retryButton = newProgressRetryButton;
					newProgressTracker.deletionComplete = false;
					newProgressTracker.jobPercentComplete = 0.0;
					newProgressTracker.error = false;
					newProgressTracker.errorMessage = '';
					newProgressTracker.startedBatchJob = false;
					newProgressTracker.objectType = objectType;

					newProgressRetryButton.click(function() {
						progressTracker.retryButtonClickHandler(newProgressTracker);
					});

					progressTracker.batchProgressTrackers[objectType] = newProgressTracker;
					progressTracker.batchQueue.push(progressTracker.batchProgressTrackers[objectType]);
				},

				startNewBatchJob: function(tracker) {
					progressTracker.batchJobsQueuedViaThisTool++;
					tracker.startedBatchJob = true;
					rkl.RKDeleteTrialDataPageController.deleteRecordType(tracker.objectType, function(result, event) {
						if (event.status) {
							if (result != 'NOT_ALLOWED') {
								tracker.batchJobID = result;
								progressTracker.batchJobsQueuedViaThisTool--;
							} else {
								$('#progressTrackerBarsHolder').empty();
								progressTracker.stopUpdateLoop();
								$('#statusMessageHolder').text('You do not have permission to use this tool.');
								progressTracker.batchProgressTrackers = {};
							}
						} else if (event.type === 'exception') {
							tracker.progressBarElement.attr('class', 'progressBarError');
							tracker.progressBarMessageElement.text(tracker.objectType + ': ' + event.message);
							progressTracker.batchJobsQueuedViaThisTool--;
							progressTracker.retryButton.show();
						} else {
							tracker.progressBarElement.attr('class', 'progressBarError');
							tracker.progressBarMessageElement.text(tracker.objectType + ': ' + event.message);
							progressTracker.batchJobsQueuedViaThisTool--;
							progressTracker.retryButton.show();
						}
					});
				},

				getNumberOfRunningBatchJobs: function() {
					var currentlyRunningBatchJobs = sforce.connection.query('SELECT CompletedDate, JobType, Status FROM AsyncApexJob WHERE CompletedDate = null AND JobType = \'BatchApex\' AND (Status = \'Queued\' OR Status = \'Processing\' OR Status = \'Preparing\')');
					var numberOfJobs = currentlyRunningBatchJobs.size;
					return numberOfJobs;
				},*/

				removeDuplicatesFromArray: function(arrayToRemoveFrom) {
					var i, length = arrayToRemoveFrom.length, out=[], obj={};

					for (i = 0; i < length; i++) {
						obj[arrayToRemoveFrom[i]] = 0;
					}

					for (i in obj) {
						out.push(i);
					}

					return out;
				},

				/*
				retryButtonClickHandler: function(tracker) {
					tracker.retryButton.hide();
					tracker.progressBarElement.attr('class', 'progressBar');
					tracker.progressBarElement.css('width', '0%');
					tracker.progressBarMessageElement.text(tracker.objectType);
					tracker.deletionComplete = false;
					tracker.jobPercentComplete = 0.0;
					tracker.error = false;
					tracker.errorMessage = '';
					tracker.startedBatchJob = false;
					tracker.batchJobID = null;
					progressTracker.batchQueue.push(tracker);
					progressTracker.startUpdateLoop();
				},*/

				initializeUI: function() {
					$('.pbBody')
						.append(
							$('<div/>')
								.attr('id', 'deletionInput')
								.append(
									$('<span/>')
										.text('Comma separated list of object names: ')
								).append(
									$('<input/>')
										.attr('type', 'text')
										.attr('id', 'objectTypeNames')
								).append(
									$('<br/>')
								).append(
									$('<span/>')
										.text('Or leave the list blank and press "Start Deletion" to continue with the default set of objects: ')
								).append(
									$('<div/>')
										.attr('id', 'startDeletionButton')
										.attr('class', 'btn')
										//.css('background-image', '/img/alohaSkin/btn_sprite.png')
										.text('Start Deletion')
								).append(
									$('<br/>')
								)
						).append(
							$('<div/>')
								.attr('id', 'statusMessageHolder')
						)
				},

				initializeEventHandlers: function() {
					$('#startDeletionButton').click(function() {
						progressTracker.reset();

						if ($('#objectTypeNames').val() != '' && $('#objectTypeNames').val() != null) {
							objectTypes.length = 0;
							objectTypes = progressTracker.removeDuplicatesFromArray($('#objectTypeNames').val().replace(/ /g, '').split(','));
						}

						rkl.RKDeleteTrialDataPageController.deleteObjectTypes(objectTypes, function(result, event) {
							if (event.status) {
								console.log('Start of deletion successful');
								$('#statusMessageHolder').append(
									$('<div/>').append(
										$('<span/>').text('The deletion task was started successfully. Click the following link to view the status of any currently running Apex Jobs. ')
									).append(
										$('<a/>').attr('href', '/apexpages/setup/listAsyncApexJobs.apexp').attr('target', '_blank').text('Apex Jobs')
									)
								);
							} else if (event.type === 'exception') {
								console.log('Exception while trying to start deletion');
								$('#statusMessageHolder').append(
									$('<div/>').append(
										$('<span/>').text('The following exception occurred while trying to start the deletion task: ' + result)
									)
								);
							} else {
								console.log('Unknown error');
								$('#statusMessageHolder').append(
									$('<div/>').append(
										$('<span/>').text('An unknown error occurred. The error message is as follows: ' + result)
									)
								);
							}
						});

						/*
						for (var objectTypeCounter = 0; objectTypeCounter < objectTypes.length; objectTypeCounter++) {
							progressTracker.startNewTask(objectTypes[objectTypeCounter]);
						}

						progressTracker.startUpdateLoop();
						*/
					});
				}
			};
			
			$(document).ready(function() {
				progressTracker.initialize();
			});
		})(jQuery);
	  </script>
	<apex:pageBlock title="Delete Trial Data">
		
	</apex:pageBlock>
</apex:page>