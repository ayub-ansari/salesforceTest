<apex:component controller="rkl.HierarchyTreeController" access="global">

    <apex:attribute name="selectableAttr" type="Boolean" assignTo="{!selectable}" description="Do you want nodes to be selectable?" access="global"/>
    <apex:attribute name="valueAttr" type="String" description="IDs of selected Nodes in CSV format" access="global"/>
    
    <apex:inputHidden id="selectedKeys" value="{!value}" />
    <apex:includeScript value="{!URLFOR($Resource.rkl__DynaTree, 'jquery/jquery.js' )}" />
    <apex:includeScript value="{!URLFOR($Resource.rkl__DynaTree, 'jquery/jquery-ui.custom.js' )}" />
    <apex:includeScript value="{!URLFOR($Resource.rkl__DynaTree, 'jquery/jquery.cookie.js' )}" />
    <apex:includeScript value="{!URLFOR($Resource.rkl__DynaTree, 'src/jquery.dynatree.js' )}" />
    
    <apex:stylesheet value="{!URLFOR($Resource.rkl__DynaTree, 'src/skin/ui.dynatree.css')}" />
	
	<style>
		#statusBar {
			height: 5px;
			width: 400px;
			border: 2px solid #747E96;
			border-radius: 30px;
			padding: 2px;
		}
		
		#loaded {
			background-color: #1797c0;
			width: 0px;
			height: 100%;
			border-radius: 30px;
		}
		#jobPercentage {
			margin: 0;
			padding: 0;
		}
	</style>
	
    <script src="/soap/ajax/27.0/connection.js" type="text/javascript"></script>
    <script type="text/javascript"> 

	var statusHolderID = '', loadingBarUpdateTimeMS = 100;
	
	function updateCurrentlySelectedNode()
	{
		if (jQuery('#loaded').length <= 0)
		{
			jQuery('#treeCommandButtonSection').append('<br/><div id="statusBar"><div id="loaded"></div></div><p id="jobPercentage">Job Queued...</p>');
		}
		rkl.HierarchyTreeController.rebuildCurrentNode(function(result, event) {
			if (event.status)
			{
				statusHolderID = result;
				updateStatusBar();
			} else if (event.type === 'exception') {
				console.log('Remoting Exception: ' + event.message + '\n' + event.where);
			} else {
				console.log('Remoting Error: ' + event.message);
			}
		});
	}
	
	function updateHierarchy()
	{
		if (jQuery('#loaded').length <= 0)
		{
			jQuery('#treeCommandButtonSection').append('<br/><div id="statusBar"><div id="loaded"></div></div><p id="jobPercentage">Job Queued...</p>');
		}
		rkl.HierarchyTreeController.rebuildHierarchy(function(result, event) {
			if (event.status)
			{
				statusHolderID = result;
				updateStatusBar();
			} else if (event.type === 'exception') {
				console.log('Remoting Exception: ' + event.message + '\n' + event.where);
			} else {
				console.log('Remoting Error: ' + event.message);
			}
		});
	}
	
	function updateStatusBar()
	{
		rkl.HierarchyTreeController.queryStatusHolder(statusHolderID, function(result, event) {
			if (event.status)
			{
				var jobTotalPercentage;
				if (result.rkl__First_Job_Status__c == 100 && result.rkl__Second_Job_Status__c == 100 && result.rkl__Third_Job_Status__c == 100 && result.rkl__Fourth_Job_Status__c == 100)
				{
					jobTotalPercentage = 100;
				}
				else
				{
					//console.log('First Job: ' + result.rkl__First_Job_Status__c + ', Second Job: ' + result.rkl__Second_Job_Status__c + ', Third Job: ' + result.rkl__Third_Job_Status__c + ', Fourth Job: ' + result.rkl__Fourth_Job_Status__c);
					jobTotalPercentage = result.rkl__First_Job_Status__c * 25.0/100.0 + result.rkl__Second_Job_Status__c * 25.0/100.0 + result.rkl__Third_Job_Status__c * 25.0/100.0 + result.rkl__Fourth_Job_Status__c * 25.0/100.0;
				}
				jQuery('#loaded').css('width', jobTotalPercentage + '%');
				if (jobTotalPercentage == 100)
				{
					jQuery('#jobPercentage').html('Job Status: Complete. Please press the "Refresh Hierarchy Viewer" button to refresh the hierarchy tree.');
					rkl.HierarchyTreeController.deleteStatusHolder(statusHolderID, function(result, event) {
						if (event.status) {
						
						} else if (event.type === 'exception') {
							console.log('Could not delete status holder object: ' + event.message + '\n' + event.where);
						} else {
							console.log('Remoting Error on delete status holder object: ' + event.message);
						}
					});
				}
				else {
					jQuery('#jobPercentage').html('Job Status: ' + jobTotalPercentage + '%');
				}				
				
				if (jobTotalPercentage != 100)
				{
					setTimeout(updateStatusBar(), loadingBarUpdateTimeMS);
				}
			} else if (event.type === 'exception') {
				console.log('Remoting Exception: ' + event.message + '\n' + event.where);
			} else {
				console.log('Remoting Error: ' + event.message);
			}
		});
	}
    
    $(function(){
    	//Set up to allow for queries
    	sforce.connection.sessionId = "{!GETSESSIONID()}";
    	
    	if (!{!showButtons}) {
    		$('#updateHierarchyBtn').hide();
    		$('#updateNodeBtn').hide();
    	}
    
        // Attach the dynatree widget to an existing <div id="tree"> element
        // and pass the tree options as an argument to the dynatree() function:
        $("#tree").dynatree({
            onActivate: function(node) {
                // A DynaTreeNode object is passed to the activation handler
                // Note: we also get this event, if persistence is on, and the page is reloaded.
                //alert("You activated " + node.data.key);
                currentlySelectedNodeID = node.data.key;
            },
            persist: false,
            checkbox: {!selectable},
            generateIds: false,
            classNames: {
                checkbox: "dynatree-checkbox",
                expanded: "dynatree-expanded" 
            },
            selectMode: 3,  
            children: {!JsonString} ,  
            onClick: function(node, event) {
                if(node.getEventTargetType(event) == "title"){
                    //alert($("#detailFrame").get(0).contentWindow.location.href); // Handle the click event
                    if (node.data.key != null && node.data.key != '') {
                    	$("#detailFrame").get(0).contentWindow.location.href = "/apex/rkl__HierarchyDetailPage?Id=" + node.data.key;
                    }
                	currentlySelectedNodeID = node.data.key;
                    return false;// Prevent default processing
                }
            },                  
            onSelect: function(select, node) {
                
                alert ('/' + node.data.key);
                // Get a list of all selected nodes, and convert to a key array:
                var selKeys = $.map(node.tree.getSelectedNodes(), function(node){
                    return node.data.key;
                });
                jQuery(document.getElementById("{!$Component.selectedKeys}")).val(selKeys.join(", "));
                
                // Get a list of all selected TOP nodes
                var selRootNodes = node.tree.getSelectedNodes(true);
                // ... and convert to a key array:
                var selRootKeys = $.map(selRootNodes, function(node){
                    return node.data.key;
                });
            },
        });
    });
    </script>
    
   
    <table width="100%" cellpadding="5px" cellspacing="2px">
    <tr> 
        <td><span style="font-size: 1.5em"><strong>Location Hierarchy Tree</strong></span></td>
        <td>&nbsp;</td>
    </tr>
    <tr>
    	<td style="text-align:center" id="treeCommandButtonSection">
    		<outputPanel id="buttonContainer">
		    	<input type="button" value="Rebuild Hierarchy" class="btn" id="updateHierarchyBtn" onclick="updateHierarchy();"/>
		    	<!-- <input type="button" value="Rebuild Selected Node" class="btn" id="updateNodeBtn" onclick="updateCurrentlySelectedNode();"/> -->
		    	<apex:commandButton action="{!refresh}" value="Refresh Hierarchy Viewer" rendered="{!showButtons}"/>
	    	</outputPanel>
    	</td>
    </tr>
    <tr> 
        <td width="400px"><div id="tree" style="height:500px;overflow:auto"> </div></td>
        <td height="500px"><iframe style="height:500px;width:100%;overflow:auto;border:0px" id="detailFrame"/></td>
    </tr>     
    </table>
</apex:component>